(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{160:function(t,s,a){"use strict";a.r(s);var e=a(18),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"进程管理（pm2）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程管理（pm2）","aria-hidden":"true"}},[t._v("#")]),t._v(" 进程管理（PM2）")]),t._v(" "),a("p",[t._v("Akos框架采用PM2进行进程管理，PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程\n永远都活着，0 秒的重载， PM2 是完美的。它非常适合 IaaS 结构，但不要把它用于 PaaS 方案（随后将开发 Paas 的解决方案）。")]),t._v(" "),a("h2",{attrs:{id:"主要特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要特性","aria-hidden":"true"}},[t._v("#")]),t._v(" 主要特性")]),t._v(" "),a("ul",[a("li",[t._v("内建负载均衡（使用 Node cluster 集群模块）")]),t._v(" "),a("li",[t._v("后台运行")]),t._v(" "),a("li",[t._v("0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.")]),t._v(" "),a("li",[t._v("具有 Ubuntu 和 CentOS 的启动脚本")]),t._v(" "),a("li",[t._v("停止不稳定的进程（避免无限循环）")]),t._v(" "),a("li",[t._v("控制台检测")]),t._v(" "),a("li",[t._v("提供 HTTP API")]),t._v(" "),a("li",[t._v("远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )")])]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g pm2\n")])])]),a("h2",{attrs:{id:"采用命令行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#采用命令行","aria-hidden":"true"}},[t._v("#")]),t._v(" 采用命令行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pm2 -g     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令行安装 pm2")]),t._v("\n$ pm2 start app.js -i 4  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 后台运行pm2，启动4个app.js")]),t._v("\n                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 也可以把'max' 参数传递给 start")]),t._v("\n                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 正确的进程数目依赖于Cpu的核心数目")]),t._v("\n$ pm2 start app.js --name my-api "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命名进程")]),t._v("\n$ pm2 list               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有进程状态")]),t._v("\n$ pm2 monit              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监视所有进程")]),t._v("\n$ pm2 logs               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有进程日志")]),t._v("\n$ pm2 stop all           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止所有进程")]),t._v("\n$ pm2 restart all        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启所有进程")]),t._v("\n$ pm2 reload all         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 秒停机重载进程 (用于 NETWORKED 进程)")]),t._v("\n$ pm2 stop 0             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止指定的进程")]),t._v("\n$ pm2 restart 0          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启指定的进程")]),t._v("\n$ pm2 startup            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 产生 init 脚本 保持进程活着")]),t._v("\n$ pm2 web                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行健壮的 computer API endpoint (http://localhost:9615)")]),t._v("\n$ pm2 delete 0           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 杀死指定的进程")]),t._v("\n")])])]),a("h2",{attrs:{id:"启动服务的不同方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动服务的不同方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 启动服务的不同方式")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ pm2 start app.js -i max    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据有效CPU数目启动最大进程数目")]),t._v("\n$ pm2 start app.js -i 3      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动3个进程")]),t._v("\n$ pm2 start app.js -x        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#用fork模式启动 app.js 而不是使用 cluster")]),t._v("\n$ pm2 start app.js -x -- -a 23   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用fork模式启动 app.js 并且传递参数 (-a 23)")]),t._v("\n$ pm2 start app.js --name serverone  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动一个进程并把它命名为 serverone")]),t._v("\n$ pm2 stop serverone       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止 serverone 进程")]),t._v("\n$ pm2 start app.json        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动进程, 在 app.json里设置选项")]),t._v("\n$ pm2 start app.js -i max -- -a 23                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在--之后给 app.js 传递参数")]),t._v("\n$ pm2 start app.js -i max -e err.log -o out.log  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 并 生成一个配置文件")]),t._v("\n你也可以执行用其他语言编写的app  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" fork 模式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n$ pm2 start my-bash-script.sh    -x --interpreter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n$ pm2 start my-python-script.py -x --interpreter python\n")])])]),a("p",[t._v("0 秒停机重载：这项功能允许你重新载入代码而不用失去请求连接。")])])},[],!1,null,null,null);n.options.__file="pm2.md";s.default=n.exports}}]);